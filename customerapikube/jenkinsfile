pipeline {
  agent any

  tools {
    jdk 'java21'       // match names in Manage Jenkins → Tools
    maven 'maven'
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'projects', description: 'Git branch')
    string(name: 'MODULE_DIR', defaultValue: 'customerapikube', description: 'Path to module (use "." if at root)')
  }



  stages {
    stage('Checkout') {
      steps {
        git branch: params.BRANCH, url: 'https://github.com/eswaribala/boamssep2025batch2.git'
      }
    }

    stage('Build & Test') {
      steps {
        dir(params.MODULE_DIR) {
          bat 'mvn -B -U clean install -DskipTests -Dmaven.test.skip=true'
        }
      }

    }



    stage('Package & Archive') {
      steps {
        dir(params.MODULE_DIR) {
          bat 'mvn -B -U clean install -DskipTests -Dmaven.test.skip=true'
        }
        archiveArtifacts artifacts: "${params.MODULE_DIR}/target/*.jar", fingerprint: true
      }
    }
    stage('Docker_Deploy') {
          steps {
            dir(params.MODULE_DIR) {
              bat 'docker build -f dockerfile -t customerapiv11 .'
            }
            archiveArtifacts artifacts: "${params.MODULE_DIR}/target/*.jar", fingerprint: true
          }
        }

     stage('Kube_mysql_volume') {
               steps {
                 dir(params.MODULE_DIR) {
                   bat 'kubectl apply -f mysql-pv.yaml'
                 }
                 archiveArtifacts artifacts: "${params.MODULE_DIR}/target/*.jar", fingerprint: true
               }
             }
     stage('Kube_mysql_deploy') {
                    steps {
                      dir(params.MODULE_DIR) {
                        bat 'kubectl apply -f mysql-deployment.yaml'
                      }
                      archiveArtifacts artifacts: "${params.MODULE_DIR}/target/*.jar", fingerprint: true
                    }
                  }
     stage('Kube_cutsomer_deploy') {
                    steps {
                      dir(params.MODULE_DIR) {
                        bat 'kubectl apply -f deployment-v33.yaml'
                      }
                      archiveArtifacts artifacts: "${params.MODULE_DIR}/target/*.jar", fingerprint: true
                    }
                  }
  }

  post {
      success {
        slackSend(channel: '#jenkinsnotifyaug2025',
                  message: "✅ ${env.JOB_NAME} #${env.BUILD_NUMBER} succeeded on ${env.NODE_NAME}")
      }
      failure {
        slackSend(channel: '#jenkinsnotifyaug2025',
                  message: "❌ ${env.JOB_NAME} #${env.BUILD_NUMBER} failed. Check: ${env.BUILD_URL}")
      }
      unstable {
        slackSend(channel: '#jenkinsnotifyaug2025',
                  message: "⚠️ ${env.JOB_NAME} #${env.BUILD_NUMBER} is UNSTABLE. ${env.BUILD_URL}")
      }
      always {
        // Optional: brief summary for every build
        slackSend(channel: '#jenkinsnotifyaug2025',
                  message: "ℹ️ ${env.JOB_NAME} #${env.BUILD_NUMBER} finished with ${currentBuild.currentResult}")
      }
    }

  }
